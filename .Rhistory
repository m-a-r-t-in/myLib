tile.c <- merge(tile.counts.temp,tab.sub, by.x = "V1",by.y = "Var1", all.x = T)
tile.c <- merge(tile.counts.temp, tab.sub, by.x = "V1",by.y = "Var1", all.x = T)
tile.c <- merge(tile.counts.temp, tab.sub, by.x = "V1",by.y = "Var1", all.x = T)
View(tile.counts)
tile.counts.temp <- tile.counts
View(tile.counts.temp)
tile.c <- merge(tile.counts.temp, tab.sub,by = "Var1", all.x = T)
View(tile.c)
tile.c$Freq.y <- ifelse(is.na(tile.c$Freq.y),0,tile.c$Freq.y)
View(tile.c)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
View(tile.counts)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
View(tile.counts)
tile.counts <- as.data.frame(table(zf$dbh.class))
tile.counts.temp <- tile.counts
for(xlim in limits){
for(ylim in limits){
subplot <-  zf[zf$x.rotated >= xlim & zf$x.rotated < xlim + 10 & zf$y.rotated >= ylim & zf$y.rotated < ylim+10, ]
tab.sub <- as.data.frame(table(subplot$dbh.class))
if(nrow(tab.sub > 0)){
tile.c <- merge(tile.counts.temp, tab.sub,by = "Var1", all.x = T)
tile.c$Freq.y <- ifelse(is.na(tile.c$Freq.y),0,tile.c$Freq.y)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
}
if(nrow(tab.sub == 0)){
tile.counts <- cbind(tile.counts,zeros)
}
}
}
View(tile.counts)
results <- tile.counts[,c(1,2)]
View(results)
results$mean <- mean(tile.counts[,3:ncol(tile.counts)])
View(results)
sample.tiles <- tile.counts[,3:ncol(tile.counts)]
View(sample.tiles)
results$mean <- apply(sample.tiles, 1, mean)
View(results)
results$sd <- apply(sample.tiles, 1, sd)
View(results)
View(results)
options(scipen = 9999)
View(results)
confidenceInterval <- function(x, conf_level = 0.95) {
n <- length(x)
mean_x <- mean(x)
sd_x <- sd(x)
sem <- sd_x / sqrt(n)
z_score <- qnorm((1 + conf_level) / 2)
margin_of_error <- z_score * sem
lower_bound <- mean_x - margin_of_error
upper_bound <- mean_x + margin_of_error
return(c(lower_bound, upper_bound))
}
# Aplikace funkce na každý řádek data framu
ci.rows <- t(apply(df, 1, confidenceInterval))
# Aplikace funkce na každý řádek data framu
ci.rows <- t(apply(sample.tiles, 1, confidenceInterval))
ci.rows
results <- cbind(results,ci.rows)
View(results)
results <- tile.counts[,c(1,2)]
sample.tiles <- tile.counts[,3:ncol(tile.counts)]
results$mean <- apply(sample.tiles, 1, mean)
results$sd <- apply(sample.tiles, 1, sd)
# Aplikace funkce na každý řádek data framu
ci.rows <- as.data.frame(t(apply(sample.tiles, 1, confidenceInterval)))
View(results)
View(ci.rows)
names(ci.rows) <- c("ci.min","ci.max")
results <- cbind(results,ci.rows)
View(results)
View(zf.subplot)
subplot.table <- table(zf.subplot$dbh.class)
subplot.table <- as.data.frame(table(zf.subplot$dbh.class))
View(subplot.table)
View(results)
results <- merge(results, subplot.table, by = "Var1", all.x = T)
View(results)
res.long <- reshape2::melt(results)
View(res.long)
View(results)
res.long <- rbind(results[,c(1,2)], results[,c(1,7)])
mean.val <- results[,c(1,2,5,6)]
sample.val <- results[,c(1,7)]
sample.val$ci.max <- NA
View(sample.val)
sample.val <- results[,c(1,7)]
sample.val$ci.min <- NA
sample.val$ci.max <- NA
View(sample.val)
mean.val$type <- "mean"
View(mean.val)
mean.val <- results[,c(1,3,5,6)]
mean.val$type <- "mean"
names(mean.val)
names(mean.val) <- c("class","mean","ci.min","ci.max","type" )
names(sample.val) <- c("class","mean","ci.min","ci.max","type" )
sample.val$type <- "sample_tile"
names(sample.val) <- c("class","mean","ci.min","ci.max","type" )
View(sample.val)
names(mean.val) <- c("class","value","ci.min","ci.max","type" )
names(sample.val) <- c("class","value","ci.min","ci.max","type" )
res.long <- rbind(mean.val, sample.val)
View(res.long)
res.long$class2.numeric <- as.numeric(as.character(res.long$class))
View(res.long)
res.long$class.lab <- paste(data_long$class - 5, " - " , data_long$class + 5, sep = "")
res.long <- rbind(mean.val, sample.val)
res.long <- rbind(mean.val, sample.val)
res.long$class2.numeric <- as.numeric(as.character(res.long$class))
res.long$class.lab <- paste(res.long$class - 5, " - " , res.long$class + 5, sep = "")
res.long$class.lab <- ifelse(res.long$class.lab == "0 - 10", "1 - 10",res.long$class.lab)
res.long$x_labels <- factor(res.long$class.lab, levels=unique(res.long$x_labels))
res.long <- rbind(mean.val, sample.val)
res.long$class <- as.numeric(as.character(res.long$class))
res.long$class.lab <- paste(res.long$class - 5, " - " , res.long$class + 5, sep = "")
res.long$class.lab <- ifelse(res.long$class.lab == "0 - 10", "1 - 10",res.long$class.lab)
res.long$x_labels <- factor(res.long$class.lab, levels=unique(res.long$x_labels))
View(res.long)
res.long$x_labels <- factor(res.long$class.lab, levels=unique(res.long$x_labels))
View(res.long)
? factor
res.long$x_labels <- factor(res.long$class.lab, levels=unique(res.long$class))
View(res.long)
res.long$x_labels <- factor(res.long$class.lab)
View(res.long)
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt() +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
res.long$x_labels <- factor(res.long$class.lab, levels=unique(res.long$class.lab))
View(res.long)
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt() +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt() +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=0.8), width=0.25) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt() +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0.25, 0.5, 1,5,10)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0.1, 0.25, 0.5, 1,5,10)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ncol(sample.val)
ncol(sample.tiles)
50*50
library(myLib)
ALIVE.STATUSES <- c("X","Z","DALB","ZL","ZLM","ZV","ZZ")
DEAD.STATUSES <- c("P","O","JM","JE","EZ","ML","<Exit>","BLS")
zf <- readRDS("C:/Users/krucek/OneDrive - vukoz.cz/Dokumenty/DafengManuscriptVoxels/zffgeo_2017r.rds")
# Dafeng defined subplot
minX <- -743494.04975
maxX <- -743484.05
minY <- -1202395.95
maxY <- -1202385.95025
zf.subplot  <- zf[zf$x >= minX & zf$x <= maxX & zf$y >= minY & zf$y <= maxY, ]
plot(zf$x.rotated,zf$y.rotated)
points(zf.subplot$x.rotated,zf.subplot$y.rotated, col = "red", pch = 16)
zf <- zf[zf$status %in% ALIVE.STATUSES, ]
zf$dbh.class <- mround(zf$DBH/10,10)
zf$dbh.class <- zf$dbh.class +5
limits <- seq(0,490,by = 10)
zeros <- rep(0,15)
tile.counts <- as.data.frame(table(zf$dbh.class))
tile.counts.temp <- tile.counts
i <- 0
for(xlim in limits){
for(ylim in limits){
i <- i+1
subplot <-  zf[zf$x.rotated >= xlim & zf$x.rotated < xlim + 10 & zf$y.rotated >= ylim & zf$y.rotated < ylim+10, ]
tab.sub <- as.data.frame(table(subplot$dbh.class))
if(nrow(tab.sub > 0)){
tile.c <- merge(tile.counts.temp, tab.sub,by = "Var1", all.x = T)
tile.c$Freq.y <- ifelse(is.na(tile.c$Freq.y),0,tile.c$Freq.y)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
}
if(nrow(tab.sub == 0)){
tile.counts <- cbind(tile.counts,zeros)
}
}
}
results <- tile.counts[,c(1,2)]
sample.tiles <- tile.counts[,3:ncol(tile.counts)]
i
ncol(tile.counts)
tile.counts <- as.data.frame(table(zf$dbh.class))
tile.counts.temp <- tile.counts
i <- 0
for(xlim in limits){
for(ylim in limits){
i <- i+1
subplot <-  zf[zf$x.rotated >= xlim & zf$x.rotated < xlim + 10 & zf$y.rotated >= ylim & zf$y.rotated < ylim+10, ]
tab.sub <- as.data.frame(table(subplot$dbh.class))
if(nrow(tab.sub > 0)){
tile.c <- merge(tile.counts.temp, tab.sub,by = "Var1", all.x = T)
tile.c$Freq.y <- ifelse(is.na(tile.c$Freq.y),0,tile.c$Freq.y)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
}else(nrow(tab.sub == 0)){
tile.counts <- as.data.frame(table(zf$dbh.class))
tile.counts.temp <- tile.counts
i <- 0
for(xlim in limits){
for(ylim in limits){
i <- i+1
subplot <-  zf[zf$x.rotated >= xlim & zf$x.rotated < xlim + 10 & zf$y.rotated >= ylim & zf$y.rotated < ylim+10, ]
tab.sub <- as.data.frame(table(subplot$dbh.class))
if(nrow(tab.sub > 0)){
tile.c <- merge(tile.counts.temp, tab.sub,by = "Var1", all.x = T)
tile.c$Freq.y <- ifelse(is.na(tile.c$Freq.y),0,tile.c$Freq.y)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
}else{
tile.counts <- cbind(tile.counts,zeros)
}
}
}
i
results <- tile.counts[,c(1,2)]
sample.tiles <- tile.counts[,3:ncol(tile.counts)]
ncol(sample.tiles)
results$mean <- apply(sample.tiles, 1, mean)
results$sd <- apply(sample.tiles, 1, sd)
confidenceInterval <- function(x, conf_level = 0.95) {
n <- length(x)
mean_x <- mean(x)
sd_x <- sd(x)
sem <- sd_x / sqrt(n)
z_score <- qnorm((1 + conf_level) / 2)
margin_of_error <- z_score * sem
lower_bound <- mean_x - margin_of_error
upper_bound <- mean_x + margin_of_error
return(c(lower_bound, upper_bound))
}
# Aplikace funkce na každý řádek data framu
ci.rows <- as.data.frame(t(apply(sample.tiles, 1, confidenceInterval)))
names(ci.rows) <- c("ci.min","ci.max")
results <- cbind(results,ci.rows)
subplot.table <- as.data.frame(table(zf.subplot$dbh.class))
results <- merge(results, subplot.table, by = "Var1", all.x = T)
View(subplot.table)
zf.subplot  <- zf[zf$x >= minX & zf$x <= maxX & zf$y >= minY & zf$y <= maxY, ]
library(myLib)
ALIVE.STATUSES <- c("X","Z","DALB","ZL","ZLM","ZV","ZZ")
DEAD.STATUSES <- c("P","O","JM","JE","EZ","ML","<Exit>","BLS")
zf <- readRDS("C:/Users/krucek/OneDrive - vukoz.cz/Dokumenty/DafengManuscriptVoxels/zffgeo_2017r.rds")
# Dafeng defined subplot
minX <- -743494.04975
maxX <- -743484.05
minY <- -1202395.95
maxY <- -1202385.95025
zf <- zf[zf$status %in% ALIVE.STATUSES, ]
zf$dbh.class <- mround(zf$DBH/10,10)
zf$dbh.class <- zf$dbh.class +5
zf.subplot  <- zf[zf$x >= minX & zf$x <= maxX & zf$y >= minY & zf$y <= maxY, ]
limits <- seq(0,490,by = 10)
zeros <- rep(0,15)
tile.counts <- as.data.frame(table(zf$dbh.class))
tile.counts.temp <- tile.counts
i <- 0
for(xlim in limits){
for(ylim in limits){
i <- i+1
subplot <-  zf[zf$x.rotated >= xlim & zf$x.rotated < xlim + 10 & zf$y.rotated >= ylim & zf$y.rotated < ylim+10, ]
tab.sub <- as.data.frame(table(subplot$dbh.class))
if(nrow(tab.sub > 0)){
tile.c <- merge(tile.counts.temp, tab.sub,by = "Var1", all.x = T)
tile.c$Freq.y <- ifelse(is.na(tile.c$Freq.y),0,tile.c$Freq.y)
tile.counts <- cbind(tile.counts,tile.c$Freq.y)
}else{
tile.counts <- cbind(tile.counts,zeros)
}
}
}
results <- tile.counts[,c(1,2)]
sample.tiles <- tile.counts[,3:ncol(tile.counts)]
ncol(sample.tiles)
results$mean <- apply(sample.tiles, 1, mean)
results$sd <- apply(sample.tiles, 1, sd)
confidenceInterval <- function(x, conf_level = 0.95) {
n <- length(x)
mean_x <- mean(x)
sd_x <- sd(x)
sem <- sd_x / sqrt(n)
z_score <- qnorm((1 + conf_level) / 2)
margin_of_error <- z_score * sem
lower_bound <- mean_x - margin_of_error
upper_bound <- mean_x + margin_of_error
return(c(lower_bound, upper_bound))
}
# Aplikace funkce na každý řádek data framu
ci.rows <- as.data.frame(t(apply(sample.tiles, 1, confidenceInterval)))
names(ci.rows) <- c("ci.min","ci.max")
results <- cbind(results,ci.rows)
subplot.table <- as.data.frame(table(zf.subplot$dbh.class))
results <- merge(results, subplot.table, by = "Var1", all.x = T)
View(results)
mean.val <- results[,c(1,3,5,6)]
mean.val$type <- "mean"
names(mean.val) <- c("class","value","ci.min","ci.max","type" )
sample.val <- results[,c(1,7)]
sample.val$ci.min <- NA
sample.val$ci.max <- NA
sample.val$type <- "sample_tile"
names(sample.val) <- c("class","value","ci.min","ci.max","type" )
ncol(sample.tiles)
res.long <- rbind(mean.val, sample.val)
res.long$class <- as.numeric(as.character(res.long$class))
res.long$class.lab <- paste(res.long$class - 5, " - " , res.long$class + 5, sep = "")
res.long$class.lab <- ifelse(res.long$class.lab == "0 - 10", "1 - 10",res.long$class.lab)
res.long$x_labels <- factor(res.long$class.lab, levels=unique(res.long$class.lab))
View(res.long)
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0.1, 0.25, 0.5, 1,5,10)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0.1, 0.25, 0.5, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0, 0.1, 0.25, 0.5, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0, 0.25, 0.5, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0, 0.25, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0, 0.25, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
scale_fill_brewer(palette="Set1", direction=-1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
scales::show_col(hcl.colors(6, "Set2"))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0, 0.25, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
scale_fill_manual(values=c("Typ1"="green", "Typ2"="blue"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0, 0.25, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
scale_fill_manual(values=c("green", "blue"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
scales::show_col(hcl.colors(6, "Set2"))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0, 0.25, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
scale_fill_manual(values=c("#00C1B2", "#ED90A4"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
scales::show_col(hcl.colors(6, "Set2"))
ggplot(res.long, aes(x=x_labels, y=value, fill=type)) +
geom_bar(stat="identity", position=position_dodge()) + # `position_dodge()` oddělí sloupce pro různá měření
theme_minimal() +
scale_y_sqrt(breaks = c(0, 0.25, 1,5,10,20)) +
labs(x="DBH class [cm]", y="Tree count", fill="Plot")+  # Přizpůsobení popisků
geom_errorbar(aes(ymin=ci.min, ymax=ci.max), position=position_dodge(width=1), width=0.55) +
scale_fill_manual(values=c("#00bec4", "#f5766e"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
zf <- readRDS("C:/Users/krucek/OneDrive - vukoz.cz/Dokumenty/DafengManuscriptVoxels/zffgeo_2017r.rds")
zf <- zf[zf$status %in% ALIVE.STATUSES, ]
q34 <- zf[zf$quadrat == 34,]
View(q34)
table(q34$species)
q34$species <- gsub("BK","FagusSiulvatica",q34$species)
q34$species <- gsub("SM","PiceaAbies",q34$species)
q34$species <- gsub("JD","AbiesAlba",q34$species)
q34$species <- gsub("JR","SorbusAucuparia",q34$species)
q34$species <- gsub("JL","Ulmuslaevis",q34$species)
q34 <- zf[zf$quadrat == 34,]
q34 <- zf[zf$quadrat == 34,]
table(q34$species)
q34$species <- gsub("BK","Fagus_silvatica",q34$species)
q34$species <- gsub("SM","Picea_abies",q34$species)
q34$species <- gsub("JD","Abies_alba",q34$species)
q34$species <- gsub("JR","Sorbus_aucuparia",q34$species)
q34$species <- gsub("JL","Ulmus_laevis",q34$species)
q34$species <- gsub("BCV","Sambucus_racemosa",q34$species)
table(q34$species)
View(q34)
saveRDS(q34,"C:/Users/krucek/OneDrive - vukoz.cz/Dokumenty/DafengManuscriptVoxels/zffgeo_2017_Q34.rds")
View(res.long)
34900+22400
paired <- readRDS("C:/Users/krucek/OneDrive - vukoz.cz/DATA/WFDP_BIG_TREES/FM_TLS-psme-tshe.rds")
View(paired)
paired$command <- paste("D:/3DForest/bin/Release/3DForest.exe Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR/",paired$TREE_TAG,".pcd", sep = "")
write.table(paired$command,"Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR/run_qsm.bat", col.names = F, row.names = F,quote = F)
paired <- paired[!duplicated(paired$TREE_TAG),]
paired$command <- paste("D:/3DForest/bin/Release/3DForest.exe createQSM Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR/",paired$TREE_TAG,".pcd", sep = "")
write.table(paired$command,"Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR/run_qsm.bat", col.names = F, row.names = F,quote = F)
paired$command <- paste("start D:/3DForest/bin/Release/3DForest.exe createQSM Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR/",paired$TREE_TAG,".pcd", sep = "")
write.table(paired$command,"Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR/run_qsm_all.bat", col.names = F, row.names = F,quote = F)
gsm.files <- list.files("Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR",pattern = ".pcd.stemProfile.txt")
gsm.files
gsm.files <- gsub(".pcd.stemProfile.txt","", qsm.files)
qsm.files <- list.files("Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR",pattern = ".pcd.stemProfile.txt")
qsm.files <- gsub(".pcd.stemProfile.txt","", qsm.files)
qsm.files
View(paired)
paired$qsm3DF <- ifelse(paired$TREE_TAG %in% qsm.files, T, F)
View(paired)
missing <- paired[paired$qsm3DF == F,]
write.table(missing$command,"Y:/Les/Lidar/TLS/DATA/FGEO/WFDP/2021/q1_q2/big_trees_FR/run_qsm_missing.bat", col.names = F, row.names = F,quote = F)
library(lidR)
lh <- readLASheader("C:/Users/krucek/OneDrive - vukoz.cz/DATA/WFDP_BIG_TREES/las/29-0153.las")
lh
(-10305 * 0.001) + 580000
pts <- readLAS("C:/Users/krucek/OneDrive - vukoz.cz/DATA/WFDP_BIG_TREES/las/29-0153.las")
(10305 * 0.001) + 580000
(49332 * 0.001)
range(pts$X)
y.range <- range(pts$Y)
z.range <- range(pts$Z)
y.range
z.range
x.range[2] - x.range[1]
x.range <- range(pts$X)
x.range[2] - x.range[1]
y.range[2] - y.range[1]
z.range[2] - z.range[1]
(49332 * 0.001)
xs1 <- (-10305 * 0.001) + 580000
xs2 <- (10305 * 0.001) + 580000
ys1 <- (-8866.5 * 0.001) + 5070000
ys2 <- (8866.5 * 0.001) + 5070000
x.range[2] - x.range[1]
xs2 - xs1
y.range[2] - y.range[1]
ys2 - ys1
lh
?readLAS
(x.range[1] - 580000) /0.001
(x.range[2] - 580000) /0.001
xc1 <- (x.range[1] - 580000) /0.001
xc2 <- (x.range[2] - 580000) /0.001
xc2 - xc1
(xc2 - xc1)/2
las <- list.files("Y:/Les/Lidar/TLS/DATA/BLUE_CAT", pattern = ".las", recursive = T)
las
#install.packages("devtools")
library(devtools)
# WIN FOLDER
setwd("C:/Users/krucek/OneDrive - vukoz.cz/SCRIPTS/R/my_packages/myLib")
devtools::document()
devtools::document()
devtools::document()
packege_path <- devtools::build()
packege_path
install.packages(packege_path, repos = NULL, type = "source")
uninstall("myLib")
uninstall(myLib)
library(myLib)
remove.packages("myLib")
install.packages(packege_path, repos = NULL, type = "source")
